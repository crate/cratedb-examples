/**
 * About
 * =====
 *
 * Configure `gradle-jooq-plugin`, a Gradle plugin that integrates the jOOQ
 * code generation tool. This layout manages the jOOQ configuration within
 * a separate script file.
 *
 * Synopsis
 * ========
 *
 *     ./gradlew generateJooq
 *
 * Resources
 * =========
 *
 * - https://github.com/etiennestuder/gradle-jooq-plugin#gradle-groovy-dsl-4
 * - https://github.com/etiennestuder/gradle-jooq-plugin/tree/main/example/extract_script_file
 * - https://github.com/etiennestuder/gradle-jooq-plugin#examples
 */

buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath 'nu.studer:gradle-jooq-plugin:8.1'
    }
}

repositories {
    mavenCentral()
}

apply plugin: nu.studer.gradle.jooq.JooqPlugin

dependencies {
    jooqGenerator 'org.postgresql:postgresql:42.5.1'
    jooqGenerator 'org.jooq:jooq-meta-extensions:3.17.7'
}

jooq {

    configurations {
        // Name of the jOOQ configuration.
        main {

            // Do not *automatically* generate code.
            generateSchemaSourceOnCompilation = false

            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                    database {
                        name = 'org.jooq.meta.extensions.ddl.DDLDatabase'
                        properties {

                            // Specify the location of your SQL script.
                            // You may use ant-style file matching, e.g. /path/**/to/*.sql
                            //
                            // Where:
                            // - ** matches any directory subtree
                            // - * matches any number of characters in a directory / file name
                            // - ? matches a single character in a directory / file name
                            property {
                                key = 'scripts'
                                value = 'src/main/resources/bootstrap.sql'
                            }

                            // The sort order of the scripts within a directory, where:
                            //
                            // - semantic: sorts versions, e.g. v-3.10.0 is after v-3.9.0 (default)
                            // - alphanumeric: sorts strings, e.g. v-3.10.0 is before v-3.9.0
                            // - flyway: sorts files the same way as flyway does
                            // - none: doesn't sort directory contents after fetching them from the directory
                            property {
                                key = 'sort'
                                value = 'semantic'
                            }

                            // The default schema for unqualified objects:
                            //
                            // - public: all unqualified objects are located in the PUBLIC (upper case) schema
                            // - none: all unqualified objects are located in the default schema (default)
                            //
                            // This configuration can be overridden with the schema mapping feature
                            property {
                                key = 'unqualifiedSchema'
                                value = 'none'
                            }

                            // The default name case for unquoted objects:
                            //
                            // - as_is: unquoted object names are kept unquoted
                            // - upper: unquoted object names are turned into upper case (most databases)
                            // - lower: unquoted object names are turned into lower case (e.g. PostgreSQL)
                            property {
                                key = 'defaultNameCase'
                                value = 'lower'
                            }
                        }
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = false
                        fluentSetters = false
                    }
                    target {
                        packageName = 'io.crate.demo.jooq.model'
                        directory = 'src/generated/java'
                    }
                }
            }
        }
    }
}
