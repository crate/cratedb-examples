# Demo for loading data from Kafka topic to CrateDB table.
# Accompanies `kafka-demo.xsh` and `.env` files.
---
networks:
  ingestr-demo:
    name: ingestr-demo
    driver: bridge

services:

  # ------------
  # Apache Kafka
  # ------------
  kafka:
    image: docker.io/apache/kafka:4.0.0
    ports:
      - "${PORT_KAFKA_BROKER_INTERNAL}:${PORT_KAFKA_BROKER_INTERNAL}"
      - "${PORT_KAFKA_BROKER_EXTERNAL}:${PORT_KAFKA_BROKER_EXTERNAL}"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_BROKER_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: INTERNAL://:${PORT_KAFKA_BROKER_INTERNAL},EXTERNAL://:${PORT_KAFKA_BROKER_EXTERNAL},CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:${PORT_KAFKA_BROKER_INTERNAL},EXTERNAL://localhost:${PORT_KAFKA_BROKER_EXTERNAL}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - ingestr-demo

    # Define health check for Kafka broker.
    healthcheck:
      #test: ps augwwx | egrep "kafka.Kafka"
      test: ["CMD", "nc", "-vz", "localhost", "${PORT_KAFKA_BROKER_INTERNAL}"]
      start_period: 3s
      interval: 0.5s
      timeout: 30s
      retries: 60

  # -------
  # CrateDB
  # -------
  cratedb:
    image: docker.io/crate:6.0.3
    ports:
      - "${CRATEDB_HTTP_PORT}:${CRATEDB_HTTP_PORT}"
      - "${CRATEDB_POSTGRESQL_PORT}:${CRATEDB_POSTGRESQL_PORT}"
    environment:
      CRATE_HEAP_SIZE: 4g
    command: [
      "crate",
      "-Cdiscovery.type=single-node",
      "-Ccluster.routing.allocation.disk.threshold_enabled=false",
    ]
    networks:
      - ingestr-demo

    # Define health check for CrateDB.
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:${CRATEDB_HTTP_PORT}" ]
      start_period: 3s
      interval: 0.5s
      timeout: 30s
      retries: 60


  # -------
  # Bundler
  # -------
  # Wait for all defined services to be fully available by probing their health
  # status, even when using `docker compose up --detach`.
  # https://marcopeg.com/2019/docker-compose-healthcheck/
  start-dependencies:
    image: docker.io/dadarek/wait-for-dependencies
    depends_on:
      kafka:
        condition: service_healthy
      cratedb:
        condition: service_healthy


  # ---------------
  # Tasks for Kafka
  # ---------------

  # Create Kafka topic.
  create-topic:
    image: docker.io/apache/kafka:4.0.0
    networks: [ingestr-demo]
    command: /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:${PORT_KAFKA_BROKER_INTERNAL} --create --if-not-exists --replication-factor 1 --partitions 1 --topic demo
    deploy:
      replicas: 0

  # Delete Kafka topic.
  delete-topic:
    image: docker.io/apache/kafka:4.0.0
    networks: [ingestr-demo]
    command: /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:${PORT_KAFKA_BROKER_INTERNAL} --delete --if-exists --topic demo
    deploy:
      replicas: 0

  # Publish data to Kafka topic.
  publish-topic:
    image: docker.io/apache/kafka:4.0.0
    networks: [ingestr-demo]
    command: /opt/kafka/bin/kafka-console-producer.sh --bootstrap-server kafka:${PORT_KAFKA_BROKER_INTERNAL} --topic demo
    deploy:
      replicas: 0

  # Subscribe to Kafka topic.
  subscribe-topic:
    image: docker.io/edenhill/kcat:1.7.1
    networks: [ingestr-demo]
    command: kcat -b kafka -C -t demo  # -o end
    deploy:
      replicas: 0

  # -----------------
  # Tasks for CrateDB
  # -----------------

  # Create database table in CrateDB.
  create-table:
    image: docker.io/westonsteimel/httpie
    networks: [ingestr-demo]
    command: http "${CRATEDB_HTTP_URL_DOCKER}/_sql?pretty" stmt='CREATE TABLE "kafka_demo" ("payload" OBJECT(DYNAMIC))' --ignore-stdin
    deploy:
      replicas: 0

  # Drop database table in CrateDB.
  drop-table:
    image: docker.io/westonsteimel/httpie
    networks: [ingestr-demo]
    command: http "${CRATEDB_HTTP_URL_DOCKER}/_sql?pretty" stmt='DROP TABLE IF EXISTS "kafka_demo"' --ignore-stdin
    deploy:
      replicas: 0

  # Invoke HTTPie via Docker.
  httpie:
    image: docker.io/westonsteimel/httpie
    networks: [ingestr-demo]
    deploy:
      replicas: 0
